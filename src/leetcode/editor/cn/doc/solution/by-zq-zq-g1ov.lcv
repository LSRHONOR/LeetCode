## 基本思路

+ 通过滑动窗口 + Hash查找 + 前缀和，进行每次k个元素的枚举；
  + 对所有元素进行枚举，每次累加[0, i]的前缀和，便于后面计算。通过 start 确定滑动窗口的左边界，i 为右边界；
  + 若当前元素在滑动窗口中有重复存在，则滑动窗口的元素按顺序移除，直到没有重复为止；
  + 若当前滑动窗口已经有k个元素，则加入当前元素之前，需要移除滑动窗口最左边的元素；
  + 经元素去重、限制窗口容量操作之后，添加新元素，若加入后窗口大小为k，通过前缀和计算窗口中元素和，并保存最新的最大子数组和；

#### 1. 滑动窗口 + Hash查找

+ 通过hashSet作为滑动窗口保存k个容量的元素，通过contains()方式查找重复元素；
+ hashSet.contains()是通过hash方式查找元素，空间换时间，查找的时间复杂度为 O(1)；

#### 2. 前缀和

+ 通过前缀和可以减少重复计算；
+ 假设 sum[i, j] 为第i个元素累加到第j个元素
  + 当 i = 0 时，sum[i, j] = preSum[j]
  + 当 i ≠ 0 时，sum[i, j] = preSum[j] - preSum[i - 1]

#### 3. 编码实现

* []

```java
class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
		// set: 用来模拟滑动窗口
        Set<Integer> set = new HashSet<>();
		// preSum: 保存前缀和
		long[] preSum = new long[nums.length];

		// start: 滑动窗口的左边界
		int start = 0;
		// maxn: 最大的子数组和
		long maxn = 0;

		for (int i = 0; i < nums.length; i++) {
			// 计算第i个元素的前缀和，第0个元素特殊处理
			preSum[i] = i == 0 ? nums[i] : preSum[i - 1] + nums[i];

			// 当前元素与滑动窗口的元素重复
			while (set.contains(nums[i])) {
				// 按顺序移除滑动窗口的元素，同时左边界向右移动
				set.remove(nums[start ++]);
			}

			// 当前元素不与滑动窗口重复，但是原数量已达到k
			// 则只需按顺序移除一个元素，同时左边界移动
			if (set.size() == k) {
				set.remove(nums[start ++]);
			}

			// 新元素添加进滑动窗口
			set.add(nums[i]);

			// 若当前滑动窗口元素数量达到k，则判断是否为最大子数组和
			if (set.size() == k) {
				// 通过前缀和计算子数组和，左边界为0时特殊处理
				long temp = start == 0 ? preSum[i] : preSum[i] - preSum[start - 1];
				maxn = Math.max(maxn, temp);
			}
		}
        
        return maxn;
    }
}
```

#### 复杂度分析

+ 时间复杂度：O(n * k) （for循环为n次；while循环最多k次；set.contains()采用hash，只需1次）
+ 空间复杂度：O(n)

