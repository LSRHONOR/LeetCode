class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
		dfs(list, new ArrayList<Integer>(), k, n, 0, 0);
		return list;
	}

	static void dfs(List<List<Integer>> list, ArrayList<Integer> arrayList, int k, int n, int sum, int index) {
		if (sum > n || arrayList.size() > k)
			return;
		if (sum == n && arrayList.size() == k) {
			List<Integer> list1 = new ArrayList<>(arrayList);
			Collections.sort(list1);
			if (!list.contains(list1))
				list.add(list1);
			return;
		}
		for (int i = 1; i <= 9; i++) {
			if (i <= index)
				continue;
			index = i;
			arrayList.add(i);
			sum += i;
			dfs(list, arrayList, k, n, sum, index);
			sum -= i;
			arrayList.remove(arrayList.size() - 1);
		}
	}
}
//runtime:0 ms
//memory:39.1 MB
