class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
		int visited[] = new int[nums.length];
		backtrack(res, nums, new ArrayList<Integer>(), visited);
		return res;
	}

	static void backtrack(List<List<Integer>> res, int[] nums, ArrayList<Integer> arrayList, int[] visited) {
		if (arrayList.size() == nums.length) {
			if (res.contains(arrayList))
				return;
			res.add(new ArrayList<Integer>(arrayList));
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (visited[i] == 1)
				continue;
			visited[i] = 1;
			arrayList.add(nums[i]);
			backtrack(res, nums, arrayList, visited);
			visited[i] = 0;
			arrayList.remove(arrayList.size() - 1);
		}
	}
}
//runtime:555 ms
//memory:41.9 MB
